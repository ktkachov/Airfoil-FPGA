package airfoil;

import com.maxeler.maxcompiler.v1.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v1.statemachine.SMInput;
import com.maxeler.maxcompiler.v1.statemachine.SMOutput;
import com.maxeler.maxcompiler.v1.statemachine.SMStateValue;
import com.maxeler.maxcompiler.v1.statemachine.SMValue;
import com.maxeler.maxcompiler.v1.statemachine.kernel.KernelStateMachine;
import com.maxeler.maxcompiler.v1.statemachine.types.SMValueType;

public class ResControlSM extends KernelStateMachine {


	/*
	 * States:
	 * 0: Stream in nhd1 + ihd (stream out nhd2 + ihd if not first partition)
	 * 1: Process nhd1 + ihd, Stream in nhd2
	 * 2: Process nhd2 + ihd, stream out nhd1,
	 * 3: Read Sizes
	 * */

	private final SMStateValue st;


	private class Counts {
		final SMStateValue part1_non_halo_nodes_stream_in;
		final SMStateValue part1_halo_cells_stream_in;
		final SMStateValue part1_halo_nodes_stream_in;
		final SMStateValue part1_non_halo_cells_stream_in;

		final SMStateValue part1_non_halo_cells_stream_out;
		final SMStateValue part1_halo_cells_stream_out;

		final SMStateValue cells_stream_in;

		final SMStateValue part2_non_halo_nodes_stream_in;
		final SMStateValue part2_halo_nodes_stream_in;
		final SMStateValue part2_non_halo_cells_stream_in;
		final SMStateValue part2_halo_cells_stream_in;

		final SMStateValue part2_non_halo_cells_stream_out;
		final SMStateValue part2_halo_cells_stream_out;




		final SMStateValue part1_edges;
		final SMStateValue nhd1_nodes;
		final SMStateValue nhd2_cells;
		final SMStateValue nhd2_nodes;
		final SMStateValue part2_edges;
		public Counts(SMStateValue part1_non_halo_nodes_stream_in,
				SMStateValue part1_halo_cells_stream_in,
				SMStateValue part1_halo_nodes_stream_in,
				SMStateValue part1_non_halo_cells_stream_in,
				SMStateValue part1_non_halo_cells_stream_out,
				SMStateValue part1_halo_cells_stream_out,
				SMStateValue cells_stream_in,
				SMStateValue part2_non_halo_nodes_stream_in,
				SMStateValue part2_halo_nodes_stream_in,
				SMStateValue part2_non_halo_cells_stream_in,
				SMStateValue part2_halo_cells_stream_in,
				SMStateValue part2_non_halo_cells_stream_out,
				SMStateValue part2_halo_cells_stream_out,
				SMStateValue part1_edges, SMStateValue nhd1_nodes,
				SMStateValue nhd2_cells, SMStateValue nhd2_nodes,
				SMStateValue part2_edges) {
			super();
			this.part1_non_halo_nodes_stream_in = part1_non_halo_nodes_stream_in;
			this.part1_halo_cells_stream_in = part1_halo_cells_stream_in;
			this.part1_halo_nodes_stream_in = part1_halo_nodes_stream_in;
			this.part1_non_halo_cells_stream_in = part1_non_halo_cells_stream_in;
			this.part1_non_halo_cells_stream_out = part1_non_halo_cells_stream_out;
			this.part1_halo_cells_stream_out = part1_halo_cells_stream_out;
			this.cells_stream_in = cells_stream_in;
			this.part2_non_halo_nodes_stream_in = part2_non_halo_nodes_stream_in;
			this.part2_halo_nodes_stream_in = part2_halo_nodes_stream_in;
			this.part2_non_halo_cells_stream_in = part2_non_halo_cells_stream_in;
			this.part2_halo_cells_stream_in = part2_halo_cells_stream_in;
			this.part2_non_halo_cells_stream_out = part2_non_halo_cells_stream_out;
			this.part2_halo_cells_stream_out = part2_halo_cells_stream_out;
			this.part1_edges = part1_edges;
			this.nhd1_nodes = nhd1_nodes;
			this.nhd2_cells = nhd2_cells;
			this.nhd2_nodes = nhd2_nodes;
			this.part2_edges = part2_edges;
		}

	}

	private class Sizes {
		final SMStateValue nodes;
		final SMStateValue cells;
		final SMStateValue halo_cells;
		final SMStateValue non_halo_cells;
		final SMStateValue halo_nodes;
		final SMStateValue non_halo_nodes;
		final SMStateValue edges;
		final SMStateValue iph_cells; // Intra partition halo cells
		final SMStateValue iph_nodes;
		final SMStateValue nhd1_cells;
		final SMStateValue nhd1_halo_cells;
		final SMStateValue nhd1_halo_nodes;
		final SMStateValue nhd2_halo_cells;
		final SMStateValue nhd2_halo_nodes;

		final SMStateValue nhd1_non_halo_nodes;
		final SMStateValue nhd1_non_halo_cells;

		final SMStateValue nhd2_non_halo_nodes;
		final SMStateValue nhd2_non_halo_cells;

		final SMStateValue iph_halo_cells;
		final SMStateValue iph_halo_nodes;
		final SMStateValue iph_non_halo_cells;
		final SMStateValue iph_non_halo_nodes;


		final SMStateValue part1_edges;
		final SMStateValue nhd1_nodes;
		final SMStateValue nhd2_cells;
		final SMStateValue nhd2_nodes;
		final SMStateValue part2_edges;

		public Sizes(SMStateValue nodes, SMStateValue cells,
				SMStateValue halo_cells, SMStateValue non_halo_cells,
				SMStateValue halo_nodes, SMStateValue non_halo_nodes,
				SMStateValue edges, SMStateValue iph_cells,
				SMStateValue iph_nodes, SMStateValue nhd1_cells,
				SMStateValue nhd1_halo_cells, SMStateValue nhd1_halo_nodes,
				SMStateValue nhd2_halo_cells, SMStateValue nhd2_halo_nodes,
				SMStateValue nhd1_non_halo_nodes,
				SMStateValue nhd1_non_halo_cells,
				SMStateValue nhd2_non_halo_nodes,
				SMStateValue nhd2_non_halo_cells, SMStateValue iph_halo_cells,
				SMStateValue iph_halo_nodes, SMStateValue iph_non_halo_cells,
				SMStateValue iph_non_halo_nodes, SMStateValue nhd1_edges,
				SMStateValue nhd1_nodes, SMStateValue nhd2_cells,
				SMStateValue nhd2_nodes, SMStateValue nhd2_edges) {
			super();
			this.nodes = nodes;
			this.cells = cells;
			this.halo_cells = halo_cells;
			this.non_halo_cells = non_halo_cells;
			this.halo_nodes = halo_nodes;
			this.non_halo_nodes = non_halo_nodes;
			this.edges = edges;
			this.iph_cells = iph_cells;
			this.iph_nodes = iph_nodes;
			this.nhd1_cells = nhd1_cells;
			this.nhd1_halo_cells = nhd1_halo_cells;
			this.nhd1_halo_nodes = nhd1_halo_nodes;
			this.nhd2_halo_cells = nhd2_halo_cells;
			this.nhd2_halo_nodes = nhd2_halo_nodes;
			this.nhd1_non_halo_nodes = nhd1_non_halo_nodes;
			this.nhd1_non_halo_cells = nhd1_non_halo_cells;
			this.nhd2_non_halo_nodes = nhd2_non_halo_nodes;
			this.nhd2_non_halo_cells = nhd2_non_halo_cells;
			this.iph_halo_cells = iph_halo_cells;
			this.iph_halo_nodes = iph_halo_nodes;
			this.iph_non_halo_cells = iph_non_halo_cells;
			this.iph_non_halo_nodes = iph_non_halo_nodes;
			this.part1_edges = nhd1_edges;
			this.nhd1_nodes = nhd1_nodes;
			this.nhd2_cells = nhd2_cells;
			this.nhd2_nodes = nhd2_nodes;
			this.part2_edges = nhd2_edges;
		}

	}

	private final Sizes sizes;
	private final Counts counts;


	private final SMStateValue halo_read_delay_count;
	private final SMStateValue halo_write_delay_count;
	private final SMStateValue read_sizes;

	private final SMStateValue partition_count;
	private final SMStateValue lat_del_count;


	private final SMOutput processing;
	private final SMOutput writing;
	private final SMOutput writing_halo;
	private final SMOutput halo_read_cell;
	private final SMOutput halo_read_node;
	private final SMOutput read_sizes_out;
	private final SMOutput read_edge;
	private final SMOutput read_cell;
	private final SMOutput read_node;

	private final int addr_width;
	private final int halo_io_delay;

	private final SMInput nodes_in;
	private final SMInput cells_in;
	private final SMInput halo_cells_in;
	private final SMInput halo_nodes_in;
	private final SMInput edges_in;
	private final SMInput iph_cells_in; // Intra partition halo cells
	private final SMInput iph_nodes_in;
	private final SMInput nhd1_cells_in;
	private final SMInput nhd1_edges_in;
	private final SMInput nhd1_nodes_in;
	private final SMInput nhd2_cells_in;
	private final SMInput nhd2_nodes_in;
	private final SMInput nhd2_edges_in;
	private final SMInput nhd1_halo_nodes_in;
	private final SMInput nhd1_halo_cells_in;
	private final SMInput nhd2_halo_nodes_in;
	private final SMInput nhd2_halo_cells_in;
	private final SMInput nParts;
	private final SMInput kernel_running;

	private final int sizes_lat;
	private final SMStateValue cycle_count;
	private final int arith_delay;
	private final SMStateValue arith_delay_count;

	public ResControlSM(KernelLib owner, int width, int halo_delay, int sizes_lat, int arith_delay) {
		super(owner);
		this.addr_width 		= width;
		this.arith_delay 		= arith_delay;
		this.sizes_lat 			= sizes_lat;
		SMValueType addr_t 		= smUInt(addr_width);
		this.halo_io_delay		= halo_delay;

		arith_delay_count		= state.value(addr_t, 0);
		halo_read_delay_count 	= state.value(smUInt(width), 0);
		read_sizes				= state.value(smBool(), true);
		halo_write_delay_count	= state.value(addr_t, 0);
		partition_count			= state.value(addr_t, 0);
		st						= state.value(smUInt(2), 3);

		cycle_count 			= state.value(smUInt(48), 0);

		edges_in		= io.input("edges", addr_t);
		nodes_in		= io.input("nodes", addr_t);
		cells_in		= io.input("cells", addr_t);
		halo_cells_in	= io.input("halo_cells", addr_t);
		halo_nodes_in 	= io.input("halo_nodes", addr_t);

		nhd1_cells_in 	= io.input("nhd1_cells", addr_t);
		nhd1_edges_in	= io.input("nhd1_edges", addr_t);
		nhd1_nodes_in	= io.input("nhd1_nodes", addr_t);

		iph_cells_in	= io.input("iph_cells", addr_t);
		iph_nodes_in	= io.input("iph_nodes", addr_t);

		nhd2_cells_in	= io.input("nhd2_cells", addr_t);
		nhd2_edges_in	= io.input("nhd2_edges", addr_t);
		nhd2_nodes_in	= io.input("nhd2_nodes", addr_t);
		nhd1_halo_nodes_in = io.input("nhd1_halo_nodes", addr_t);
		nhd1_halo_cells_in = io.input("nhd1_halo_cells", addr_t);
		nhd2_halo_nodes_in = io.input("nhd2_halo_nodes", addr_t);
		nhd2_halo_cells_in = io.input("nhd2_halo_cells", addr_t);
		nParts			= io.input("nParts", addr_t);
		kernel_running	= io.input("kernel_running", smBool());

		processing 		= io.output("processing", smBool());
		writing 		= io.output("writing", smBool());
		halo_read_cell 	= io.output("halo_read_cell", smBool());
		halo_read_node	= io.output("halo_read_node", smBool());
		read_sizes_out 	= io.output("read_sizes", smBool());
		read_edge 		= io.output("read_edge", smBool());
		read_cell		= io.output("read_cell", smBool());
		read_node 		= io.output("read_node", smBool());
		writing_halo	= io.output("writing_halo", smBool());

		lat_del_count   = state.value(addr_t, 0);

		sizes = new Sizes(state.value(addr_t, 0),
					state.value(addr_t, 0),
					state.value(addr_t, 0),
					state.value(addr_t, 0),
					state.value(addr_t, 0),
					state.value(addr_t, 0),
					state.value(addr_t, 0),
					state.value(addr_t, 0),
					state.value(addr_t, 0),
					state.value(addr_t, 0),
					state.value(addr_t,0),
					state.value(addr_t,0),
					state.value(addr_t,0),
					state.value(addr_t,0),
					state.value(addr_t,0),
					state.value(addr_t,0),
					state.value(addr_t,0),
					state.value(addr_t,0),
					state.value(addr_t,0),
					state.value(addr_t,0),
					state.value(addr_t,0),
					state.value(addr_t,0),
					state.value(addr_t,0),
					state.value(addr_t,0),
					state.value(addr_t,0),
					state.value(addr_t,0),
					state.value(addr_t,0)
				);

		counts = new Counts(state.value(addr_t, 0),
				state.value(addr_t, 0),
				state.value(addr_t, 0),
				state.value(addr_t, 0),
				state.value(addr_t, 0),
				state.value(addr_t, 0),
				state.value(addr_t, 0),
				state.value(addr_t, 0),
				state.value(addr_t,0),
				state.value(addr_t,0),
				state.value(addr_t,0),
				state.value(addr_t,0),
				state.value(addr_t,0),
				state.value(addr_t,0),
				state.value(addr_t,0),
				state.value(addr_t,0),
				state.value(addr_t,0),
				state.value(addr_t,0)
			);


	}

	private void resetCounts(Counts c) {
		c.cells_stream_in.next <== 0;
		c.nhd1_nodes.next <== 0;
		c.nhd2_cells.next <== 0;
		c.nhd2_nodes.next <== 0;
		c.part1_edges.next <== 0;
		c.part1_halo_cells_stream_in.next <== 0;
		c.part1_halo_nodes_stream_in.next <== 0;
		c.part1_non_halo_cells_stream_in.next <== 0;
		c.part1_non_halo_cells_stream_out.next <== 0;
		c.part1_halo_cells_stream_out.next <== 0;
		c.part1_non_halo_nodes_stream_in.next <== 0;
		c.part2_edges.next <== 0;
		c.part2_halo_cells_stream_in.next <== 0;
		c.part2_halo_cells_stream_out.next <== 0;
		c.part2_halo_nodes_stream_in.next <== 0;
		c.part2_non_halo_cells_stream_in.next <== 0;
		c.part2_non_halo_cells_stream_out.next <== 0;
		c.part2_non_halo_nodes_stream_in.next <== 0;
	}

	private void readInSizes(Sizes s, Counts c) {
		debug.printf("reading sizes: cycle:%d, nodes:%d\n", cycle_count, nodes_in);
		s.cells.next <== cells_in;
		s.edges.next <== edges_in;
		s.nodes.next <== nodes_in;
		s.halo_cells.next <== halo_cells_in;
		s.halo_nodes.next <== halo_nodes_in;
		s.iph_cells.next <== iph_cells_in;
		s.iph_nodes.next <== iph_nodes_in;
		s.nhd1_cells.next <== nhd1_cells_in;
		s.part1_edges.next <== nhd1_edges_in;
		s.nhd1_nodes.next <== nhd1_nodes_in;
		s.nhd2_cells.next <== nhd2_cells_in;
		s.part2_edges.next <== nhd2_edges_in;
		s.nhd2_nodes.next <== nhd2_nodes_in;
		s.nhd1_halo_cells.next <== nhd1_halo_cells_in;
		s.nhd1_halo_nodes.next <== nhd1_halo_nodes_in;
		s.nhd2_halo_cells.next <== nhd2_halo_cells_in;
		s.nhd2_halo_nodes.next <== nhd2_halo_nodes_in;

		s.non_halo_cells.next <== cells_in - halo_cells_in;
		s.non_halo_nodes.next <== nodes_in - halo_nodes_in;
		s.nhd1_non_halo_cells.next <== nhd1_cells_in - nhd1_halo_cells_in;
		s.nhd1_non_halo_nodes.next <== nhd1_nodes_in - nhd1_halo_nodes_in;
		s.nhd2_non_halo_cells.next <== nhd2_cells_in - nhd2_halo_cells_in;
		s.nhd2_non_halo_nodes.next <== nhd2_nodes_in - nhd2_halo_nodes_in;
		s.iph_halo_cells.next <== halo_cells_in - nhd1_halo_cells_in - nhd2_halo_cells_in;
		s.iph_halo_nodes.next <== halo_nodes_in - nhd1_halo_nodes_in - nhd2_halo_nodes_in;

		debug.printf("iph_cells_in:%d, halo_cells_in:%d, nhd1_halo_cells_in:%d, nhd2_halo_cells_in:%d\n",
				iph_cells_in, halo_cells_in, nhd1_halo_cells_in, nhd2_halo_cells_in);
		debug.printf("iph_halo_cells.next=%d\n",  halo_cells_in - nhd1_halo_cells_in - nhd2_halo_cells_in);

		s.iph_non_halo_cells.next <== iph_cells_in - (halo_cells_in - nhd1_halo_cells_in - nhd2_halo_cells_in);
		s.iph_non_halo_nodes.next <== iph_nodes_in - (halo_nodes_in - nhd1_halo_nodes_in - nhd2_halo_nodes_in);

	}

	private SMValue streamInNhd1IhdFinished() {
		SMValue res =
			counts.part1_non_halo_cells_stream_in === sizes.nhd1_non_halo_cells  + sizes.iph_non_halo_cells &
			counts.part1_halo_cells_stream_in === sizes.nhd1_halo_cells + sizes.iph_halo_cells &
			counts.part1_non_halo_nodes_stream_in === sizes.nhd1_non_halo_nodes + sizes.iph_non_halo_nodes &
			counts.part1_halo_nodes_stream_in === sizes.nhd1_halo_nodes + sizes.iph_halo_nodes
			;
		return res;
	}

	private SMValue streamInNhd2Finished() {
		SMValue res =
			counts.part2_non_halo_cells_stream_in === sizes.nhd2_non_halo_cells &
			counts.part2_halo_cells_stream_in === sizes.nhd2_halo_cells &
			counts.part2_non_halo_nodes_stream_in === sizes.nhd2_non_halo_nodes &
			counts.part2_halo_nodes_stream_in === sizes.nhd2_halo_nodes
			;
		return res;
	}

	private SMValue streamOutNhd2IhdFinished() {
		SMValue res =
			counts.part2_non_halo_cells_stream_out === sizes.nhd2_non_halo_cells + sizes.iph_non_halo_cells &
			counts.part2_halo_cells_stream_out === sizes.nhd2_halo_cells + sizes.iph_halo_cells
			;
		return res;
	}

	private SMValue streamOutNhd1Finished() {
		SMValue res =
			counts.part1_halo_cells_stream_out === sizes.nhd1_halo_cells &
			counts.part1_non_halo_cells_stream_out === sizes.nhd1_non_halo_cells
			;
		return res;
	}

	private SMValue processNhd1IhdFinished() {
		SMValue res =
			counts.part1_edges === sizes.part1_edges;
			;
		return res;
	}

	private SMValue processNhd2IhdFinished() {
		SMValue res =
			counts.part2_edges === sizes.part2_edges;
		return res;
	}

	private void updateCountsState0() {
		IF (partition_count <= nParts) {
			IF (counts.part1_non_halo_cells_stream_in < sizes.nhd1_non_halo_cells + sizes.iph_non_halo_cells) {
				counts.part1_non_halo_cells_stream_in.next <== counts.part1_non_halo_cells_stream_in + 1;
			}

			IF (counts.part1_non_halo_nodes_stream_in < sizes.nhd1_non_halo_nodes + sizes.iph_non_halo_nodes) {
				counts.part1_non_halo_nodes_stream_in.next <== counts.part1_non_halo_nodes_stream_in + 1;
			}

			IF (halo_read_delay_count < halo_io_delay) {
				halo_read_delay_count.next <== halo_read_delay_count + 1;
			} ELSE {
				IF (counts.part1_halo_cells_stream_in < sizes.nhd1_halo_cells + sizes.iph_halo_cells) {
					counts.part1_halo_cells_stream_in.next <== counts.part1_halo_cells_stream_in + 1;
					halo_read_delay_count.next <== 0;
				}
				IF (counts.part1_halo_nodes_stream_in < sizes.nhd1_halo_nodes + sizes.iph_halo_nodes) {
					counts.part1_halo_nodes_stream_in.next <== counts.part1_halo_nodes_stream_in + 1;
					halo_read_delay_count.next <== 0;
				}
			}
		}

		IF (partition_count !== 1) {

			IF (counts.part2_non_halo_cells_stream_out < sizes.nhd2_non_halo_cells + sizes.iph_non_halo_cells) {
				counts.part2_non_halo_cells_stream_out.next <== counts.part2_non_halo_cells_stream_out + 1;
			}

			IF (halo_write_delay_count < halo_io_delay) {
				halo_write_delay_count.next <== halo_write_delay_count + 1;
			} ELSE {
				IF (counts.part2_halo_cells_stream_out < sizes.nhd2_halo_cells + sizes.iph_halo_cells) {
					counts.part2_halo_cells_stream_out.next <== counts.part2_halo_cells_stream_out + 1;
					halo_write_delay_count.next <== 0;
				}
			}
		}

	}


	private void updateCountsState1() {
		IF (counts.part1_edges < sizes.part1_edges) {
			counts.part1_edges.next <== counts.part1_edges + 1;
		}
		IF (counts.part2_non_halo_cells_stream_in < sizes.nhd2_non_halo_cells) {
			counts.part2_non_halo_cells_stream_in.next <== counts.part2_non_halo_cells_stream_in + 1;
		}
		IF (halo_read_delay_count < halo_io_delay) {
			halo_read_delay_count.next <== halo_read_delay_count + 1;
		} ELSE {
			IF (counts.part2_halo_cells_stream_in < sizes.nhd2_halo_cells) {
				counts.part2_halo_cells_stream_in.next <== counts.part2_halo_cells_stream_in + 1;
				halo_read_delay_count.next <== 0;
			}
			IF (counts.part2_halo_nodes_stream_in < sizes.nhd2_halo_nodes) {
				counts.part2_halo_nodes_stream_in.next <== counts.part2_halo_nodes_stream_in + 1;
				halo_read_delay_count.next <== 0;
			}
		}

		IF (counts.part2_non_halo_nodes_stream_in < sizes.nhd2_non_halo_nodes) {
			counts.part2_non_halo_nodes_stream_in.next <== counts.part2_non_halo_nodes_stream_in + 1;
		}

	}

	private void updateCountsState2() {
		IF (counts.part2_edges < sizes.part2_edges) {
			counts.part2_edges.next <== counts.part2_edges + 1;
		}
		IF (halo_write_delay_count < halo_io_delay) {
			halo_write_delay_count.next <== halo_write_delay_count + 1;
		} ELSE {
			IF (counts.part1_halo_cells_stream_out < sizes.nhd1_halo_cells) {
				counts.part1_halo_cells_stream_out.next <== counts.part1_halo_cells_stream_out + 1;
				halo_write_delay_count.next <== 0;
			}
		}
		IF (counts.part1_non_halo_cells_stream_out < sizes.nhd1_non_halo_cells) {
			counts.part1_non_halo_cells_stream_out.next <== counts.part1_non_halo_cells_stream_out + 1;
		}
	}

	@Override
	public void nextState() {
		IF (kernel_running) {
			cycle_count.next <== cycle_count + 1;
			readInSizes(sizes, counts);
			SWITCH (st) {
				CASE (0) {
					IF (partition_count === 1) {
						IF (streamInNhd1IhdFinished()) {
							IF (arith_delay_count === arith_delay) {
								st.next <== 1;
								halo_read_delay_count.next <== 0;
								halo_write_delay_count.next <== 0;
								arith_delay_count.next <== 0;
							} ELSE {
								arith_delay_count.next <== arith_delay_count + 1;
							}
						} ELSE {
							updateCountsState0();
						}
					} ELSE {
						IF (streamInNhd1IhdFinished() & streamOutNhd2IhdFinished()) {
							IF (arith_delay_count === arith_delay) {
								arith_delay_count.next <== 0;
								st.next <== 1;
								halo_read_delay_count.next <== 0;
								halo_write_delay_count.next <== 0;
							} ELSE {
								arith_delay_count.next <== arith_delay_count + 1;
							}
						} ELSE {
							updateCountsState0();
						}
					}
				}

				CASE (1) {
					IF (processNhd1IhdFinished() & streamInNhd2Finished()) {
						IF (arith_delay_count === arith_delay) {
							arith_delay_count.next <== 0;
							st.next <== 2;
							halo_read_delay_count.next <== 0;
							halo_write_delay_count.next <== 0;
						} ELSE {
							arith_delay_count.next <== arith_delay_count + 1;
						}
					} ELSE {
						updateCountsState1();
					}
				}

				CASE (2) {
					IF (partition_count === nParts) {
						st.next <== 0;
						lat_del_count.next <== 0;
						partition_count.next <== partition_count + 1;
					} ELSE{
						IF (processNhd2IhdFinished() & streamOutNhd1Finished()) {
							IF (arith_delay_count === arith_delay) {
								st.next <== 3;
								lat_del_count.next <== 0;
								arith_delay_count.next <== 0;
							} ELSE {
								arith_delay_count.next <== arith_delay_count + 1;
							}
						} ELSE {
							updateCountsState2();
						}
					}
				}

				CASE (3) {
					resetCounts(counts);
					IF (lat_del_count === 0 & ~read_sizes) {
						read_sizes.next <== true;
					}
					IF (read_sizes) {
						read_sizes.next <== false;
					}
					IF (lat_del_count === sizes_lat) {
						debug.printf("Will read in sizes: cycle: %d\n", cycle_count);
						readInSizes(sizes, counts);
						resetCounts(counts);
						partition_count.next <== partition_count + 1;
						lat_del_count.next <== 0;
						st.next <== 0;
					} ELSE {
						lat_del_count.next <== lat_del_count + 1;
					}
				}

				OTHERWISE {

				}
			}
		}
	}

	@Override
	public void outputFunction() {
		debug.printf("cycle: %d| kernel_running: %d | nodes:%d | pCount:%d | state:%d | lat_count:%d | iph_non_halo_cells:%d, iph_halo_cells:%d\n",
				cycle_count, kernel_running, sizes.nodes, partition_count, st, lat_del_count, sizes.iph_non_halo_cells, sizes.iph_halo_cells);

		debug.printf("iph_cells_in:%d, halo_cells_in:%d, nhd1_halo_cells_in:%d, nhd2_halo_cells_in:%d\n",
				iph_cells_in, halo_cells_in, nhd1_halo_cells_in, nhd2_halo_cells_in);
		debug.printf("iph_halo_cells.next=%d\n",  halo_cells_in - nhd1_halo_cells_in - nhd2_halo_cells_in);
//		debug.printf("iph_cells_in:%d, halo_cells_in:%d, nhd1_halo_cells_in:%d, nhd2_halo_cells_in:%d\n",
//				iph_cells_in, halo_cells_in, nhd1_halo_cells_in, nhd2_halo_cells_in);

		IF (kernel_running){
			SWITCH (st) {
				CASE (0) {
					processing <== false;
					IF (partition_count <= 1) {
						writing <== false;
						writing_halo <== false;
					} ELSE {
						writing <== counts.part2_non_halo_cells_stream_out < sizes.nhd2_non_halo_cells + sizes.iph_non_halo_cells;
						writing_halo <== (counts.part2_halo_cells_stream_out < sizes.nhd2_halo_cells + sizes.iph_halo_cells)
										& (halo_write_delay_count === halo_io_delay);
					}

					read_edge <== false;
					IF (partition_count <= nParts) {
						read_cell <== (counts.part1_non_halo_cells_stream_in < sizes.nhd1_non_halo_cells + sizes.iph_non_halo_cells);
						read_node <== (counts.part1_non_halo_nodes_stream_in < sizes.nhd1_non_halo_nodes + sizes.iph_non_halo_nodes);

						halo_read_cell <== (counts.part1_halo_cells_stream_in < sizes.nhd1_halo_cells + sizes.iph_halo_cells)
							& (halo_read_delay_count === halo_io_delay);

//						debug.printf("\nSMReading halo cell st0: %d\n", (counts.part1_halo_cells_stream_in < sizes.nhd1_halo_cells + sizes.iph_halo_cells)
//								& (halo_read_delay_count === halo_io_delay));

						halo_read_node <== (counts.part1_halo_nodes_stream_in < sizes.nhd1_halo_nodes + sizes.iph_halo_nodes)
							& (halo_read_delay_count === halo_io_delay);
					} ELSE {
						read_cell <== false;
						read_node <== false;
						halo_read_cell <== false;
						halo_read_node <== false;
					}
					read_sizes_out <== false;
				}

				CASE (1) {
					processing <== ~processNhd1IhdFinished();
					writing <== false;
					writing_halo <== false;
					halo_read_cell <== (counts.part2_halo_cells_stream_in < sizes.nhd2_halo_cells) & (halo_read_delay_count === halo_io_delay);
//					debug.printf("\nReading halo cell st1: %d\n", (counts.part2_halo_cells_stream_in < sizes.nhd2_halo_cells) & (halo_read_delay_count === halo_io_delay));
					halo_read_node <== (counts.part2_halo_nodes_stream_in < sizes.nhd2_halo_nodes) & (halo_read_delay_count === halo_io_delay);
					read_edge <== ~processNhd1IhdFinished();
					read_cell <== counts.part2_non_halo_cells_stream_in < sizes.nhd2_non_halo_cells;
					read_node <== counts.part2_non_halo_nodes_stream_in < sizes.nhd2_non_halo_nodes;
					read_sizes_out <== false;
				}

				CASE (2) {
					processing <== ~processNhd2IhdFinished();
//					debug.printf("State2: ~processFinished:%d\n", ~processNhd2IhdFinished());
					writing <== counts.part1_non_halo_cells_stream_out < sizes.nhd1_non_halo_cells;
//					debug.printf("part1_non_halo_cells_stream_out: %d, nhd1_non_halo_cells:%d\n",
//							counts.part1_non_halo_cells_stream_out, sizes.nhd1_non_halo_cells);

					writing_halo <== counts.part1_halo_cells_stream_out < sizes.nhd1_halo_cells & halo_write_delay_count === halo_io_delay;
//					debug.printf("part1_halo_cells_out:%d, nhd1_halo_cells:%d\n", counts.part1_halo_cells_stream_out, sizes.nhd1_halo_cells);
					halo_read_cell <== false;
					halo_read_node <== false;
					read_edge <== ~processNhd2IhdFinished();
					read_cell <== false;
					read_node <== false;
					read_sizes_out <== false;
				}

				CASE (3) {
					processing <== false;
					writing <== false;
					writing_halo <== false;
					halo_read_cell <== false;
					halo_read_node <== false;
					read_edge <== false;
					read_cell <== false;
					read_node <== false;
					read_sizes_out <== read_sizes & partition_count <= nParts;
				}
				OTHERWISE {

				}
			}

		}
	}
}
