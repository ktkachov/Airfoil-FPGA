package airfoil;

import com.maxeler.maxcompiler.v1.kernelcompiler.KernelConfiguration.SimulationOptions.SimulationBehaviour;
import com.maxeler.maxcompiler.v1.managers.MAXBoardModel;
import com.maxeler.maxcompiler.v1.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v1.managers.custom.Stream;
import com.maxeler.maxcompiler.v1.managers.custom.blocks.KernelBlock;

public class AirfoilSimManager extends CustomManager {

	public AirfoilSimManager(MAXBoardModel board_model, String name,
			Target target) {
		super(board_model, name, target);
		getCurrentKernelConfig().simulation.setRAMAddressCollisionBehaviour(SimulationBehaviour.WARNING);
		KernelBlock resCalc = addKernel(new ResCalcKernel(makeKernelParameters("ResCalcKernel")));

		Stream in_host_cell = addStreamFromHost("halo_cells");
		Stream in_host_node = addStreamFromHost("halo_nodes");


		Stream nodes_dram = addStreamFromHost("nodes_from_dram");
		Stream cells_dram = addStreamFromHost("cells_from_dram");
		Stream addresses_dram = addStreamFromHost("addresses_from_dram");
		Stream sizes_dram = addStreamFromHost("sizes");


		resCalc.getInput("node_input_dram") <== nodes_dram;
		resCalc.getInput("cell_input_dram") <== cells_dram;
		resCalc.getInput("addresses") <== addresses_dram;
		resCalc.getInput("input_host_cell") <== in_host_cell;
		resCalc.getInput("input_host_node") <== in_host_node;

		resCalc.getInput("sizes") <== sizes_dram;

		Stream to_host = addStreamToHost("res");
		to_host <== resCalc.getOutput("result_pcie");
		Stream to_dram = addStreamToHost("to_dram");
		to_dram <== resCalc.getOutput("result_dram");


		config.setAllowNonMultipleTransitions(true);//FIXME: Must remove later!!!!!!
	}

}
